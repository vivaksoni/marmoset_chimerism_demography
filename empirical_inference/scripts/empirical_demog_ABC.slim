// Keywords: nonWF, non-Wright-Fisher

initialize() {
//	defineConstant("d_Nanc", 100000);
//	defineConstant("d_Nbot", 2);
//	defineConstant("d_Ncurr", 100000);
//	defineConstant("d_Tbot", 10);
	//start the clock
	defineGlobal("start", clock());
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(keepPedigrees=T);	
	defineConstant("Nanc", asInteger(d_Nanc)); //Ancestral population size (to which everything is scaled)
	defineConstant("Nbot", asInteger(d_Nanc * d_Nbot)); //Population size at bottleneck
	defineConstant("Ncurr", asInteger(d_Ncurr));	//Population size at time of sampling
	defineConstant("Tbot", asInteger(d_Tbot*Nanc)); //Time of bottleneck
	defineConstant("burnin", asInteger(10*Nanc)); //10N burnin
	defineConstant("simEnd", asInteger(burnin + (d_Tbot*Nanc))); //SimEnd is burnin + no. of gens since bottleneck
	defineConstant("r", ((Ncurr/Nbot)^(1/Tbot))-1); //Growth rate calculated from Ncurr, Nbot and Tbot
	
	//MUTATION RATE//
	//fixed recombination rate (Nachman and Crowell 2000 average)
	if (d_mu_map=='fixed')
	{
		mu = 0.81e-8;
		initializeMutationRate(mu);
	}
	//variable rate (from input file)
	else
	{
		lines = readFile(d_mu_map);
		mu = NULL;
		coords = NULL;
		for (line in lines)
		{
			components = strsplit(line,"\t");
			coords = c(coords, asInteger(components[0]));
			mu = c(mu, asFloat(components[1]));
		}
		coords = c(coords[1:(size(coords)-1)] - 1, 1000000);
		initializeMutationRate(mu, coords);
	}
		
	initializeMutationType("m1", 0.5, "f", 0.0);
	m1.convertToSubstitution = T;
	
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 1, 1000000);
	
	//RECOMBINATION RATE//
	//fixed recombination rate (Payseur and Nachman 2000).
	if (d_rr_map=='fixed')
	{
		rr = 1e-8;
		initializeRecombinationRate(rr);
	}
	//variable rate (from input file - already adjusted for sex-average rate)
	else
	{
		lines = readFile(d_rr_map);
		rr = NULL;
		coords = NULL;
		for (line in lines)
		{
			components = strsplit(line,"\t");
			coords = c(coords, asInteger(components[0]));
			rr = c(rr, asFloat(components[1]));
		}
		coords = c(coords[1:(size(coords)-1)] - 1, 1000000);
		initializeRecombinationRate(rr, coords);
	}
}

reproduction() {
	// randomize the order of p1.individuals
	parents = sample(p1.individuals, p1.individualCount);
	
	// draw monogamous pairs and generate litters
	for (i in seq(0, p1.individualCount - 2, by=2))
	{
		parent1 = parents[i];
		parent2 = parents[i + 1];
		litterSize = 2;
		
		for (j in seqLen(litterSize))
			p1.addCrossed(parent1, parent2);
	}
	
	// disable this callback for this cycle
	self.active = 0;
}
1 early() {
	sim.addSubpop("p1", Nanc);
	community.rescheduleScriptBlock(s1, start=simEnd, end=simEnd);

}
early() {
	//Constant pop size during burnin
	if (sim.cycle < burnin){
		p1.fitnessScaling = Nanc / p1.individualCount;
	}
	else
	//Bottleneck followed by exponential growth decline for remainder of simulation
	{
	   t = sim.cycle - burnin;
	   p1_size = round(Nbot * (1+ r)^t);
		p1.fitnessScaling = (p1_size) / p1.individualCount;
	}
}


//late() {
//	inds = p1.individuals;
//	catn(sim.cycle + ": " + size(inds) + " (" + max(inds.age) + ")");
//}


s1 late() {
    ids = p1.individuals.pedigreeParentIDs;
   
    id_strings = NULL;
    for (ind in p1.individuals) {
        ids = ind.pedigreeParentIDs;
        ind_id = strsplit(substr(paste(ind), 14), ">")[0];
        id_string = paste(ind_id, ind.pedigreeID, ids, sep='\t');
        writeFile(d_folder + "/pedigreeIDs_" + d_paramID + "_rep" + d_repID + ".txt", id_string, append=T);
        //catn(id_string);
        id_strings = c(id_strings, id_string);
    }
    ids = p1.individuals.pedigreeParentIDs;
//    catn(size(ids) + " ids");
//    catn(size(unique(ids)) + " unique ids");
//    catn(size(id_strings) + " id strings");
//    catn(size(unique(id_strings)) + " unique id strings");
    p1.individuals.genomes.outputVCF(d_folder + "/" + d_paramID + "_rep" + d_repID + ".vcf");
    
//   print("Peak Mem Usage: " + usage(peak = T));
//	print("Runtime: " + (clock()-start));
	inds = p1.individuals;
	print("Simulation complete, final population size: " + size(inds));
}
